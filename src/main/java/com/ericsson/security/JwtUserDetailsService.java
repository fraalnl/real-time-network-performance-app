package com.ericsson.security;

import com.ericsson.repository.UserRepository;
import com.ericsson.model.EngineerEntity;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import java.util.Collections;
import java.util.Optional;

@Service
//Spring Securityâ€™s interface for fetching user authentication details from a data source
public class JwtUserDetailsService implements UserDetailsService {

    private final UserRepository userRepository;
    private String bcryptHashOfAdminPassword;

    public JwtUserDetailsService(@Value("${admin.password.bcrypt}") String bcryptHashOfAdminPassword, UserRepository userRepository) {
    	this.bcryptHashOfAdminPassword = bcryptHashOfAdminPassword;
        this.userRepository = userRepository; //injected via the constructor to enforce immutability
    }

    /*
    A User object (from org.springframework.security.core.userdetails.User) is returned with:
	Username: "admin"
	Encrypted Password: "bcryptHashOfAdminPassword"
	Authority: ROLE_ADMIN (grants admin privileges)
     */
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        if ("admin".equals(username)) { //generated by Java method
            return new User(
                    "admin",
                    bcryptHashOfAdminPassword,
                    Collections.singletonList(new SimpleGrantedAuthority("ROLE_ADMIN"))
            );
        } else {
            Optional<EngineerEntity> userOpt = userRepository.findByUsername(username);
            if (userOpt.isPresent()) {
                EngineerEntity engineer = userOpt.get();
                return new User(
                        engineer.getUsername(),
                        engineer.getPassword(),
                        Collections.singletonList(new SimpleGrantedAuthority(engineer.getRole()))
                );
            } else {
                throw new UsernameNotFoundException("User not found with username: " + username);
            }
        }
    }
}
